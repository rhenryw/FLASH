Name: hero-section
CSS: |
  [data-bit="hero-section"] {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    background: #0D1117;
    width: 100%;
  }
  [data-bit="hero-section"] .hero-content {
    position: relative;
    z-index: 2;
    text-align: center;
    color: white;
    max-width: 800px;
    padding: 2rem;
  }
  [data-bit="hero-section"] .hero-title {
    font-size: clamp(2.5rem, 8vw, 5rem);
    font-weight: 800;
    margin-bottom: 1rem;
    color: #ffffff;
    line-height: 1.1;
  }
  [data-bit="hero-section"] .hero-title-main {
    display: block;
    font-size: clamp(2.5rem, 8vw, 5rem);
    font-weight: 800;
    color: #FF9900; /* highlight orange */
  }
  [data-bit="hero-section"] .hero-title-sub {
    display: block;
    font-size: clamp(1.5rem, 4vw, 2.5rem);
    font-weight: 600;
    color: #FFDC00; /* particles yellow as accent */
    margin-top: 0.5rem;
    opacity: 0.9;
  }
  [data-bit="hero-section"] .hero-subtitle {
    font-size: clamp(1.2rem, 3vw, 1.8rem);
    margin-bottom: 2rem;
    opacity: 0.9;
    line-height: 1.6;
  }
  [data-bit="hero-section"] .hero-logo {
    display: block;
    width: clamp(120px, 25vw, 240px);
    height: auto;
    margin: 0 auto 1rem;
  }
  [data-bit="hero-section"] .hero-cta {
    display: inline-flex;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
  }
  [data-bit="hero-section"] .btn {
    padding: 1rem 2rem;
    border: none;
    border-radius: 50px;
    font-size: 1.1rem;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    overflow: hidden;
  }
  [data-bit="hero-section"] .btn-primary {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    backdrop-filter: blur(10px);
    border: 2px solid rgba(255, 255, 255, 0.3);
  }
  [data-bit="hero-section"] .btn-primary:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }
  [data-bit="hero-section"] .btn-secondary {
    background: transparent;
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.8);
  }
  [data-bit="hero-section"] .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.1);
    transform: translateY(-2px);
  }
  [data-bit="hero-section"] .floating-shapes {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
  }
  [data-bit="hero-section"] .shape {
    position: absolute;
    border-radius: 50%;
    background: transparent;
    animation: float 6s ease-in-out infinite;
  }
  [data-bit="hero-section"] .shape:nth-child(1) {
    width: 80px;
    height: 80px;
    top: 20%;
    left: 10%;
    animation-delay: -1s;
  }
  [data-bit="hero-section"] .shape:nth-child(2) {
    width: 60px;
    height: 60px;
    top: 60%;
    right: 15%;
    animation-delay: -2s;
  }
  [data-bit="hero-section"] .shape:nth-child(3) {
    width: 100px;
    height: 100px;
    bottom: 20%;
    left: 20%;
    animation-delay: -3s;
  }
  [data-bit="hero-section"] .shape:nth-child(4) {
    width: 40px;
    height: 40px;
    top: 30%;
    right: 30%;
    animation-delay: -4s;
  }
  @keyframes text-shimmer { 0% { opacity: .9 } 100% { opacity: 1 } }
  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(180deg); }
  }
JS: |
  const { container, config, utils } = ctx;
  container.style.minHeight = '100vh';
  container.style.display = 'flex';
  container.style.alignItems = 'center';
  container.style.justifyContent = 'center';
  container.style.position = 'relative';
  container.style.overflow = 'hidden';

  // Solid background color override per request
  container.style.background = config.background || '#0010FF';

  // Create hero content
  const heroContent = document.createElement('div');
  heroContent.className = 'hero-content';

  // Handle title - create styled title with optional tagline
  const titleText = config.title || 'Build Amazing Sites';
  const titleContainer = document.createElement('div');
  titleContainer.className = 'hero-title';

  // If a logo is provided, use it instead of text
  if (config.logoUrl) {
    const img = document.createElement('img');
    img.src = config.logoUrl;
    img.alt = titleText || 'Logo';
    img.className = 'hero-logo';
    titleContainer.appendChild(img);
  } else {
    const mainTitle = document.createElement('span');
    mainTitle.className = 'hero-title-main';
    mainTitle.textContent = titleText;
    if (config.logoFontFamily) {
      mainTitle.style.fontFamily = String(config.logoFontFamily);
    }
    titleContainer.appendChild(mainTitle);
  }

  // Optional tagline/subtitle
  if (config.tagline) {
    const subTitle = document.createElement('span');
    subTitle.className = 'hero-title-sub';
    subTitle.textContent = config.tagline;
    titleContainer.appendChild(subTitle);
  }

  heroContent.appendChild(titleContainer);

  const subtitle = document.createElement('p');
  subtitle.className = 'hero-subtitle';
  subtitle.textContent = config.subtitle || 'Create stunning websites with the power of YAML and reusable components';
  heroContent.appendChild(subtitle);

  const ctaContainer = document.createElement('div');
  ctaContainer.className = 'hero-cta';

  if (config.primaryButton) {
    const btnPrimary = document.createElement('a');
    btnPrimary.className = 'btn btn-primary';
    btnPrimary.textContent = config.primaryButton.text || 'Get Started';
    btnPrimary.href = config.primaryButton.href || '#';
    if (config.primaryButton.onClick) {
      btnPrimary.addEventListener('click', new Function(config.primaryButton.onClick));
    }
    ctaContainer.appendChild(btnPrimary);
  }

  if (config.secondaryButton) {
    const btnSecondary = document.createElement('a');
    btnSecondary.className = 'btn btn-secondary';
    btnSecondary.textContent = config.secondaryButton.text || 'Learn More';
    btnSecondary.href = config.secondaryButton.href || '#';
    if (config.secondaryButton.onClick) {
      btnSecondary.addEventListener('click', new Function(config.secondaryButton.onClick));
    }
    ctaContainer.appendChild(btnSecondary);
  }

  heroContent.appendChild(ctaContainer);

  // Add floating particles with requested color
  const shapesContainer = document.createElement('div');
  shapesContainer.className = 'floating-shapes';

  const palette = (config.particles && Array.isArray(config.particles.colors) && config.particles.colors.length)
    ? config.particles.colors
    : ['#0010FF','#FFDC00','#FF9900'];
  for (let i = 0; i < 24; i++) {
    const shape = document.createElement('div');
    shape.className = 'shape';
    const col = palette[i % palette.length];
    shape.style.background = utils.normalizeColor(col);
    shape.style.opacity = '0.8';
    shapesContainer.appendChild(shape);
  }

  container.appendChild(shapesContainer);
  container.appendChild(heroContent);
